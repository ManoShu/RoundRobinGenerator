@using System.Text.RegularExpressions
@inject IJSRuntime JSRuntime

<div class="row">
    <textarea @bind="Lutas" id="txtLutas" name="txtLutas" placeholder="Lutas" class="col-sm-6" rows="5"></textarea>
    <textarea @bind="Sorteio" id="txtSorteio" name="txtSorteio" placeholder="Sorteio" class="col-sm-6"
        rows="5"></textarea>
</div>
<div class="row">
    <input type="button" class="btn btn-success col-sm-12" value="Gerar" @onclick="GerarRound" />
</div>
<section id="output_section">
<div class="row">
    <textarea @bind="Output" class="col-sm-12" rows="20" readonly="readonly"></textarea>
</div>
</section>

@code {

    const string MAGIC_REGEX =
        //@"(?<trash>.{0,})\t(?<data>\d{2}/\d{2}/\d{4})?\t(?<player1>[a-z-_.|ç•]{1,})\t(?<score1>[^\t]{0,})\t(?<score2>[^\t]{0,})\t(?<player2>.{1,})\n"
        //@"(?<trash>.{0,})\t(?<data>\d{2}/\d{2}/\d{4})?\t(?<player1>[a-z-_.|ç•]{1,})\t(?<score1>[^\t]{0,})\t(?<score2>[^\t]{0,})\t(?<player2>[^\n]{1,})\n"
        @"(?<trash>.{0,})\t(?<data>\d{2}/\d{2}/\d{4})?\t(?<player1>[á0-9/a-z-_.|ç• ]{1,})\t(?<score1>[^\t]{0,2})\t(?<score2>[^\t]{0,2})\t(?<player2>[^\n]{1,})\n"
        ;
    const string EMPTY_SLOT = "BYE";

    const int TIMEOUT_MATCHING = 1000;
    
    private string Lutas { get; set; }
    private string Sorteio { get; set; }
    private string Output { get; set; }

    private bool PlayerFoughtTheRestOfTheList(List<Tuple<string,string>> matches, List<string> playerList, int player1Index)
    {
        bool result = true;

        var nextPlayerIndex = player1Index + 1;
        var player1Name = playerList[player1Index];

        while(nextPlayerIndex < playerList.Count)
        {
            var player2Name = playerList[nextPlayerIndex];
            result &= matches.Any(x => 
                (x.Item1 == player1Name && x.Item2 == player2Name) ||
                (x.Item1 == player2Name && x.Item2 == player1Name)                
                );
            nextPlayerIndex++;
        }

        return result;
    }

    private List<Tuple<string, string>> ParseMatches()
    {
        var theRegex = new Regex(MAGIC_REGEX,
            RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.IgnorePatternWhitespace | RegexOptions.ExplicitCapture
        );

        var matchesBase = theRegex.Matches(Lutas);

        var matchesAnteriores = new List<Tuple<string, string>>();

        foreach (Match match in matchesBase)
        {
            var matchPlayers = new Tuple<string, string>(
            match.Groups["player1"].Value.Trim(),
            match.Groups["player2"].Value.Trim()
            );

            //TODO: ver se empates contam ou não
            //if(match.Groups["score1"].Value.Trim() != "-")
            {
                matchesAnteriores.Add(matchPlayers);
            }
        }

        return matchesAnteriores;
    }

    private List<string> ParseNames()
    {
        var nomesSorteio = Sorteio
        .Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)
        .Select(x => x.Trim())
        .ToList();

        //se for quantidade impar
        if(nomesSorteio.Count % 2 != 0)
        {
            //adiciona o espaço vazio para ficar par
            nomesSorteio.Add(EMPTY_SLOT);
        }
        return nomesSorteio;
    }

    private int CalculateRepeatCount(List<Tuple<string,string>> matches, List<string> nomesSorteio)
    {
        var count = 0;
        for (int idx = 0; idx < nomesSorteio.Count; idx += 2)
        {
            var player1 = nomesSorteio[idx];
            var player2 = nomesSorteio[idx + 1];

             if (matches.Any(x => 
                (x.Item1 == player1 && x.Item2 == player2) ||
                (x.Item1 == player2 && x.Item2 == player1)                
                ))
                {
                    count++;
                }
        }
        return count;
    }

    private bool ReordernarListaSorteio(List<Tuple<string,string>> matches, List<string> nomesSorteio){
        bool temMatchesRepetidas = true;
        int loopCount = 0;

        int maxRepeats = int.MaxValue;
        List<string> lowestRepeatList = null;

        while (temMatchesRepetidas && loopCount <= TIMEOUT_MATCHING)
        {
            temMatchesRepetidas = false;
            for (int idx = 0; idx < nomesSorteio.Count; idx += 2)
            {
                var player1 = nomesSorteio[idx];
                var player2 = nomesSorteio[idx + 1];

                //verifica se o par de jogadores já se enfrentou anteriormente
                if (matches.Any(x => 
                (x.Item1 == player1 && x.Item2 == player2) ||
                (x.Item1 == player2 && x.Item2 == player1)                
                ))
                {
                    if(PlayerFoughtTheRestOfTheList(matches, nomesSorteio, idx))
                    {
                        nomesSorteio.RemoveAt(idx);
                        nomesSorteio.Insert(0, player1);
                    }
                    else
                    {
                        nomesSorteio.RemoveAt(idx + 1);//tira o player 2

                        //se for o último
                        if(idx == nomesSorteio.Count - 1) // como removi o player 2, checo pelo player 1 ser o último da lista
                        {
                            nomesSorteio.Insert(0, player2); // adiciona ao topo
                            
                        }
                        else
                        {
                            nomesSorteio.Add(player2); // adiciona no fim da lista
                        }
                    }

                    temMatchesRepetidas = true; //continua a verificar
                    break;
                }
            }

            var repeatCount = CalculateRepeatCount(matches, nomesSorteio);
            if(repeatCount < maxRepeats)
            {
                maxRepeats = repeatCount;
                lowestRepeatList = nomesSorteio.ToList();
            }

            loopCount++;
        }

        if(temMatchesRepetidas)
        {
            nomesSorteio = lowestRepeatList;
        }

        return temMatchesRepetidas;
    }

    private void GerarRound()
    {
        var matchesAnteriores = ParseMatches();

        var nomesSorteio = ParseNames();

        var temMatchesRepetidas = ReordernarListaSorteio(matchesAnteriores, nomesSorteio);

        Output = string.Empty;

        if (temMatchesRepetidas)
        {
            Output += "Há matches repetidas. Lista com menos repetições:" + Environment.NewLine;
        }
         
        for (int idx = 0; idx < nomesSorteio.Count; idx += 2)
        {
            var player1 = nomesSorteio[idx];
            var player2 = ((idx + 1) < nomesSorteio.Count) ? nomesSorteio[idx + 1] : EMPTY_SLOT;

            Output += $"{player1}{Environment.NewLine}{player2}{Environment.NewLine}";
        }

    }
}